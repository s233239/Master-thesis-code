"""
Plotting utilities for electricity market data analysis.

This module provides functions to generate common visualizations such as
demand curves, renewable production, and residual demand over time.
Each function is designed to take preprocessed data and a matplotlib axes
object for flexible subplot integration.

Functions follow a consistent interface: 
    plot_x(ax, data1, data2, ...)

Currently available:
    - plot_price_demand_curve
    - plot_demand_over_time
    - plot_renewable_over_time
    - plot_residual_over_time
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.patches import Patch

from functions_policy import *


## Result Plots
def plot_results(output, profits, diff_table, n_players, model_parameters, storage_parameters,
                 plots=False, bidding_zone=None, season=None):
    """
    Generate and display plots for Cournot simulation results, including market dynamics,
    battery operations, and welfare metrics.

    Parameters:
        output (list): 
            Nested output list from the storage optimization model for each player.
        profits (list): 
            List of lists showing player profits over Cournot iterations.
        n_players (int): 
            Number of storage players in the simulation.
        model_parameters (list): 
            Model-wide variables including max_iter, TIME, T, D, N, RES, Demand_volume, Demand_price, diff_table_initial.
        storage_parameters (list): 
            Storage-related parameters including alpha_batt, OC_all, Eta_all, E_max_all, Q_max_all, Q_all.
        plots (bool, optional): 
            Whether to save generated plots as PNG files. Default is False.
        bidding_zone (str, optional): 
            Name of the bidding zone used for filename saving. Required if plots=True.
        season (str, optional): 
            Name of the season used for filename saving. Required if plots=True.

    Returns:
        None:
            Plots are shown (and optionally saved), but no data is returned.
    """


    
    ## === EXPORT RESULTS ===
    [max_iter, TIME, T, D, N, RES, Demand_volume, Demand_price, diff_table_initial] = model_parameters
    [alpha_batt, OC_all, Eta_all, E_max_all, Q_max_all, Q_all] = storage_parameters

    # 1. Proad = Discharge - Charge for each player and time
    proad = [
        [output[player][1][t] - output[player][0][t] for t in TIME]
        for player in range(n_players)
    ]

    # 2. Battery storage level per player
    batt = [
        [E_max_all[player] * alpha_batt] + [output[player][2][t] for t in TIME]
        for player in range(n_players)
    ]

    # 3. Market price over time
    # for p in range(1,n_players):
    #     if output[p][3] != output[0][3]:
    #         raise "Error in convergence"

    # Now we can assume each player outputs the same market price, CS, PS, SW etc.
    market_price = [output[0][3][t] for t in TIME]

    # 4. Revenue per player and time
    revenue = [
        [output[player][4][t] for t in TIME]
        for player in range(n_players)
    ]

    # 5. Total profit per player
    profit_tot = [sum(revenue[player]) for player in range(n_players)]
    profit_tot_by_cap = [profit_tot[p]/E_max_all[p] if E_max_all[p]!=0 else 0 for p in range(n_players)]

    # 6. Total quantity offered to the market
    supply_total = [sum(proad[player][t] for player in range(n_players) if proad[player][t] >= 0) for t in TIME]   # positive for supply
    demand_total = [sum(proad[player][t] for player in range(n_players) if proad[player][t] < 0) for t in TIME]    # negative for demand
    proad_total = [supply_total[t] + demand_total[t] for t in TIME]
    q_total = [RES[t] + proad_total[t] for t in TIME]

    # 7. Unmet demand
    unmet_demand = sum(max(Demand_volume[-1, t] - q_total[t], 0) for t in TIME)

    # 8. Curtailed production
    curtailed_prod = sum(max(-Demand_volume[-1, t] + q_total[t], 0) for t in TIME)

    # 9. Consumer Surplus
    CS = np.array([output[0][5][t] for t in TIME])

    # 10. Producer Surplus
    PS = np.array([
        sum(revenue[player][t] for player in range(n_players)) + 
        RES[t] * market_price[t]
        for t in TIME
    ])

    # 11. Social Welfare
    SW = CS + PS


    ## === PLOTTING ===
    plt.figure(figsize=(14,7))
    temps_np = np.array(TIME)
    temps_with_zero_np = np.array([t for t in TIME] + [T])

    # 1. Market Price Plot
    plt.subplot(2,2,1)

    values_to_show = [round(p,2) for p in market_price if p > 0]
    values_to_show.sort()
    values_to_show_filtered = [x for i, x in enumerate(values_to_show) if i == 0 or abs(x - values_to_show[i-1]) >= 2]
    index=1
    while len(values_to_show_filtered) > 4:
        values_to_show_filtered.remove(values_to_show_filtered[index])
        index += 1
        if index >= len(values_to_show_filtered):
            index = index // 2

    for player in range(n_players):
        plt.step(temps_with_zero_np, np.append(output[player][3], output[player][3][-1]), where='post')
    for p in values_to_show_filtered:
        plt.axhline(y=p, linestyle='--', color='gray', linewidth=1)
        plt.text(x=temps_with_zero_np[-1]+1.5, y=p, s=f'y={round(p)}', color='black', ha='left', va='bottom')
    plt.xlabel("Time (h)")
    plt.ylabel("Market Price (€/MWh)")
    plt.title("Market Price Over Time")
    plt.grid(True)


    # 2. Market Clearing View
    plt.subplot(2,2,2)

    plt.step(temps_with_zero_np, np.append(Demand_volume[-1, :], Demand_volume[-1, -1]), label="Demand", where='post', color='red', linestyle='--') 
    plt.bar(temps_np+0.5, RES, label="RES Production", color='green')
    plt.bar(temps_np+0.5, supply_total, label="Storage Discharge", color='blue', bottom=RES)
    plt.bar(temps_np+0.5, demand_total, label="Storage Charge", color='deepskyblue', bottom=0)
    plt.xlabel("Time (h)")
    plt.ylabel("Power (MW)")
    bottom, top = plt.ylim()
    plt.ylim(top=top*1.2)
    plt.legend(loc='upper left')
    plt.title("Market Clearing: Supply vs Demand Over Time")

    # 3. Summary Bars for Unmet Demand, Curtailment and Market Metrics
    ax1 = plt.subplot(2,2,3)

    def engineering_notation(x, precision=3):
        if x == 0:
            return f"0"
        exponent = int(np.floor(np.log10(abs(x)) // 3 * 3))
        mantissa = x / (10 ** exponent)
        return f"{mantissa:.{precision}g}e{exponent}"

    # === Ax1: Energy metrics ===
    ax1_labels = ["Unmet Demand", "Curtailed Production"]
    ax1_heights = [unmet_demand, curtailed_prod]
    x1 = np.arange(len(ax1_labels))

    bars1 = ax1.bar(x1, ax1_heights, width=0.5, color='tab:red', label="Energy Metrics")
    ax1.bar_label(bars1, [f"{engineering_notation(x)} MWh" for x in ax1_heights])
    ax1.set_ylabel("Energy (MWh)")
    ax1.set_ylim(0, max(ax1_heights) * 10)
    ax1.set_yscale('symlog', linthresh=1e2)
    ax1.tick_params(axis='y', colors='tab:red')

    # === Ax2: Economic metrics ===
    ax2_labels = ["Consumer Surplus", "Producer Surplus", "Social Welfare"]
    ax2_heights = [np.average(CS), np.average(PS), np.average(SW)]                # Can be improved by stacking each CS[t], PS[t]
    x2 = np.arange(len(ax2_labels)) + len(x1) + 0.5     # offset to avoid overlap

    ax2 = ax1.twinx()
    bars2 = ax2.bar(x2, ax2_heights, width=0.5, color='tab:purple', label="Welfare Metrics")
    ax2.bar_label(bars2, [f"{engineering_notation(x)} €/h" for x in ax2_heights])
    ax2.set_ylabel("Average Amount per Hour (€/h)")
    ax2.set_ylim(0, max(ax2_heights) * 10)
    ax2.set_yscale('symlog', linthresh=10)
    ax2.tick_params(axis='y', colors='tab:purple')

    xticks = np.concatenate([x1, x2])
    xlabels = ax1_labels + ax2_labels
    ax1.set_xticks(xticks)
    ax1.set_xticklabels(xlabels, rotation=20)

    ax1.set_title("Market Metrics")

    # 4. Optimized Profits
    ax1 = plt.subplot(2,2,4)

    player_labels = [f"{chr(65 + p)}" for p in range(n_players)]
    width = 0.4
    x = np.arange(1,n_players+1,1)

    container = ax1.bar(x=x-width/2, height=profit_tot, width=width, tick_label=player_labels, color="tab:blue")
    ax1.bar_label(container, [f"{round(p)} €" for p in profit_tot])
    ax1.set_ylim(top=1.1*max(profit_tot))
    ax1.set_ylabel("Total profit (€)")
    ax1.tick_params(axis='y', colors='tab:blue')

    ax2 = ax1.twinx()
    container = ax2.bar(x=x+width/2, height=profit_tot_by_cap, width=width, label=player_labels, color="tab:orange")
    ax2.bar_label(container, [f"{round(p,2)} €/MWh" for p in profit_tot_by_cap])
    ax2.set_ylim(top=1.2*max(profit_tot_by_cap))
    ax2.set_ylabel("Profit by Installed Capacity Unit (€/MWh)")
    ax2.tick_params(axis='y', colors='tab:orange')

    ax1.set_title("Player Optimal Profits over the Period")

    plt.tight_layout()
    if plots:
        plt.savefig(f"{bidding_zone+season}-{n_players}players-main_market_results.png")


    # 5. Production and SoC per Player
    # Ax 1 for energy storage levels, ax 2 for energy storage discharging/charging power
    fig, ax1 = plt.subplots(figsize=(14,7))

    for player in range(n_players):
        ax1.plot(temps_with_zero_np, batt[player], label=f"SoC for Player {player + 1}")
    ax1.set_ylim(bottom=0)  # top=max(E_max_all)
    ax1.set_xlabel("Time (h)")
    ax1.set_ylabel("Battery State of Charge (MWh)")
    ax1.legend(loc="upper left")
    ax1.set_title("Battery Cycle")

    ax2 = ax1.twinx()
    for player in range(n_players):
        ax2.step(temps_with_zero_np, proad[player] + [proad[player][-1]], where="post", label=f"Supply from Player {player + 1}", linestyle='--', linewidth=0.9)
    ax2.axhline(y=0, color='black', linewidth=1)
    ax2.set_ylabel('Power [MW]')
    ax2.legend(loc='upper right')
    ax2.grid()

    fig.tight_layout()
    if plots:
        plt.savefig(f"{bidding_zone+season}-{n_players}players-storage_soc.png")


    # 6. Nash Equilibrium Result
    plt.figure(figsize=(14,7))
    x = range(1, len(profits[0]) + 1)
    if len(x) <= 20:
        xticks = np.array([1]+[2+2*i for i in range(int(np.floor(len(x)/2)))])
    elif len(x) <= 50:
        xticks = np.array([1]+[5+5*i for i in range(int(np.floor(len(x)/5)))])
    elif len(x) <= 100:
        xticks = np.array([1]+[10+10*i for i in range(int(np.floor(len(x)/10)))])
    else:
        xticks = np.array([1]+[20+20*i for i in range(int(np.floor(len(x)/20)))])


    plt.subplot(2,2,1)
    plt.plot(x[1:], diff_table, label="Max Change per Iteration")
    plt.xlabel("Iteration")
    plt.ylabel("Number of Computed Difference")
    plt.xticks(xticks)   
    plt.title("Cournot Iteration Convergence Plot")
    plt.grid(True)
    plt.legend()

    plt.subplot(2,2,2)
    for player in range(n_players):
        plt.plot(x, profits[player], label=f"Player {player+1} Profit")
    plt.xlabel("Iteration")
    plt.ylabel("Profit (€)")
    xticks[0]=2
    plt.xticks(xticks)       
    plt.title("Profit Evolution over Cournot Iteration")
    plt.ylim(bottom = 0)
    plt.grid(True)
    plt.legend()

    plt.subplot(2,2,4)
    for player in range(n_players):
        plt.plot(x[2:], [profits[player][-1] - profits[player][i] for i in range(2,len(profits[player]))], label=f"Player {player+1}")
    plt.xlabel("Iteration")
    plt.ylabel("Profit (€)")
    # xticks[0]=2
    # plt.xticks(xticks)       
    plt.title("Zoom on Profit Evolution")
    # plt.ylim(bottom = 0)
    plt.grid(True)
    plt.legend()

    plt.tight_layout()
    if plots:
        plt.savefig(f"{bidding_zone+season}-{n_players}players-cournot_metrics.png")

    return


def plot_scenarios_analysis(outputs, model_parameters=None):
    """
    Generate comparative plots of market and player metrics across multiple policy scenarios.

    Parameters:
        outputs (dict):
            Dictionary mapping scenario names (str) to output data dictionaries.
            Each output dict is indexed by player and contains lists of time series data:
            [
                q_ch (list of float): Charging quantities over time,
                q_dis (list of float): Discharging quantities over time,
                e (list of float): State of charge over time,
                price (list of float): Market prices over time,
                revenue (list of float): Revenue over time,
                CS (float or list): Consumer surplus,
                adjust_to_revenue (list of float): Policy-related cost or profit over time,
                unmet_demand (list of float): Unmet demand over time,
                curtailed_prod (list of float): Curtailed production over time,
                profit_per_player (optional)
            ]
    """
    if model_parameters:
        [max_iter, TIME, T, D, N, RES, Demand_volume, Demand_price, diff_table_initial] = model_parameters

    scenario_names = list(outputs.keys())
    n_scenarios = len(scenario_names)
    scenario_colors = mpl.color_sequences['tab10'][:n_scenarios]
    scenario_linestyles = ['-', ':', '--', '-.', ''][:n_scenarios]
    n_players = len(outputs[scenario_names[0]])
    T = len(outputs[scenario_names[0]][0][3])
    TIME = range(T)
    
    # --- 1) Market price over time ---
    plt.figure(figsize=(14, 7))
    plt.subplot(2,2,1)
    for j, scen in enumerate(scenario_names):
        # Price is same across players, take player 0 for reference
        price = outputs[scen][0][3]  
        plt.step(TIME, price, label=scen, color=scenario_colors[j], linestyle=scenario_linestyles[j])
    plt.title("Market Price Over Time")
    plt.xlabel("Time")
    plt.ylabel("Price (€/MWh)")
    plt.legend()
    plt.grid()


    # --- 2) Unmet demand over time ---
    plt.subplot(2,2,2)
    for j, scen in enumerate(scenario_names):
        unmet = outputs[scen][0][7]
        plt.step(TIME, unmet, label=scen, color=scenario_colors[j], linestyle=scenario_linestyles[j])
    plt.title("Unmet Demand Over Time")
    plt.xlabel("Time")
    plt.ylabel("Unmet Demand (MW)")
    plt.legend()
    plt.grid()


    # # --- 3) Curtailed production over time ---
    # plt.subplot(2,2,3)
    # for j, scen in enumerate(scenario_names):
    #     curtailed = outputs[scen][0][8]
    #     plt.step(TIME, curtailed, label=scen, color=scenario_colors[j])
    # plt.title("Curtailed Production Over Time")
    # plt.xlabel("Time")
    # plt.ylabel("Curtailed Production (MW)")
    # plt.legend()
    # plt.grid()

    # --- 3) Charging behavior over time ---
    plt.subplot(2,2,3)
    for i, scen in enumerate(scenario_names):
        output = outputs[scen]
        total_q_ch = [sum(output[p][0][t] for p in range(n_players)) for t in TIME]
        plt.step(TIME, total_q_ch, where='post', label=scen, color=scenario_colors[i], linestyle=scenario_linestyles[i])

    plt.title("Total Charging Behavior Across Scenarios")
    plt.xlabel("Hour")
    plt.ylabel("Charging Power [MW]")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()


    # --- 4) Profits per player grouped bar chart ---
    # Build matrix of profits: shape (n_players, n_scenarios)
    profits_matrix = np.zeros((n_players, n_scenarios))
    policy_addon = np.zeros((n_players, n_scenarios))
    for j, scen in enumerate(scenario_names):
        for p in range(n_players):
            # sum revenue as profit proxy, or have dedicated profit in outputs if available
            profits_matrix[p, j] = sum(outputs[scen][p][4])  # sum over time of revenue
            policy_addon[p, j] = sum(outputs[scen][p][6])  # sum over time of revenue

    # Plot grouped bar chart
    bar_width = 0.15
    x = np.arange(n_players)

    plt.subplot(2,2,4)
    for i, scen in enumerate(scenario_names):
        plt.bar(x + i*bar_width, profits_matrix[:, i], width=bar_width, label=f'{scen} Base Revenue', color=scenario_colors[i], edgecolor='black')
        plt.bar(x + i*bar_width, policy_addon[:, i], width=bar_width, bottom=profits_matrix[:, i], label=f'{scen} Tariff Cost', hatch='//', color='gray', edgecolor='black')

    # Create custom legend for scenarios
    scenario_handles = [Patch(color=scenario_colors[i], label=scenario_names[i]) for i in range(n_scenarios)]

    # Create custom legend for revenue types
    type_handles = [
        # Patch(facecolor='gray', edgecolor='black', label='Market revenue'),
        Patch(facecolor='gray', edgecolor='black', hatch='//', label='tariff cost')
    ]

    # # First legend
    # leg1 = plt.legend(handles=scenario_handles, loc='upper left')
    # # Second legend, added manually
    # leg2 = plt.legend(handles=type_handles, loc='upper right')
    # ax = plt.gca()
    # ax.add_artist(leg1)
    plt.legend(handles=scenario_handles + type_handles, loc="upper left", ncol=2)


    plt.xticks(x + bar_width * (n_scenarios - 1) / 2, [f'Player {p+1}' for p in range(n_players)])
    plt.ylabel("Total Profit (€)")
    plt.ylim(top=1.1*np.max(profits_matrix))
    plt.title("Player Profits by Scenario")
    plt.grid(axis='y')

    plt.tight_layout()


    # --- Other subplot: Revenue over time (aggregated over players) ---
    bar_width = 0.8 / n_scenarios
    x = np.arange(len(TIME))

    plt.figure(figsize=(14, 7))

    for j, scen in enumerate(scenario_names):
        # Aggregate over players
        base_revenue = np.sum([outputs[scen][p][4] for p in range(n_players)], axis=0)
        tariff_addon = np.sum([outputs[scen][p][6] for p in range(n_players)], axis=0)

        x_offset = x - 0.4 + j * bar_width

        plt.bar(x_offset, base_revenue, width=bar_width, label=f"{scen} Base", color=scenario_colors[j], edgecolor='black')
        plt.bar(x_offset, tariff_addon, width=bar_width, bottom=base_revenue, 
                label=f"{scen} Tariff", hatch='//', color='gray', edgecolor='black')

    plt.xlabel("Time (Hour)")
    plt.ylabel("Revenue (€)")
    plt.title("Scenario Comparison: Revenue and Tariff Component per Hour")
    plt.xticks(x, [str(t) for t in TIME])
    plt.grid(True, axis='y', linestyle='--', alpha=0.6)

    # Custom legend: one per scenario and one for tariff layer
    scenario_legend = [Patch(color=scenario_colors[i], label=scenario_names[i]) for i in range(n_scenarios)]
    tariff_legend = [Patch(facecolor='gray', hatch='//', label="tariff cost", edgecolor='black')]
    plt.legend(handles=scenario_legend + tariff_legend, loc="upper right", ncol=2)
    plt.tight_layout()


    # --- Tariffs Plots ---

    # # Plot tariffs
    # plt.figure(figsize=(10, 3))
    # plt.step(range(24), tau_ch, where='mid')
    # plt.step(range(24), tau_dis, where='mid')
    # plt.step(range(24), residual_series, where='mid', color='red', linestyle='--')
    # plt.title("Dynamic Tariffs (€/MWh)")
    # plt.xlabel("Time (h)")
    # plt.ylabel("Tariff")
    # plt.grid(True, linestyle='--', alpha=0.6)
    # plt.xticks(range(24))
    # plt.tight_layout()



outputs = {'baseline': {0: [[0.0,
    0.0,
    18.8,
    0.0,
    18.8,
    0.0,
    0.0,
    0.0,
    0.0,
    169.2,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    131.6,
    18.8,
    0.0,
    75.2],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    131.6,
    94.0,
    0.0,
    131.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [185.0,
    185.0,
    200.98000000000002,
    200.98000000000002,
    216.96,
    216.96,
    216.96,
    216.96,
    216.96,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    229.18,
    135.18,
    135.18,
    3.5799999999999983,
    3.5799999999999983,
    115.43999999999998,
    131.42,
    131.42,
    195.33999999999997],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    -94.0,
    0.0,
    -94.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -846.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3632.174835908141,
    2208.3204766355125,
    0.0,
    3111.1297719626223,
    0.0,
    -658.0,
    -94.0,
    0.0,
    -376.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [46.151950286964166,
    372.2971147569733,
    365.0569588496055,
    245.79070591977597,
    447.6120570404655,
    275.68481177908416,
    223.4756669879789,
    13.309483618879312,
    0,
    128.77823317022103,
    558.8777506837168,
    853.5396325881193,
    545.3521898175277,
    393.6961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    7.040881346277274,
    5.397850027438835,
    49.38235463110141,
    97.71183027020379]],
  1: [[37.7,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    113.1,
    113.1,
    0.0,
    113.1,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.4,
    188.5,
    0.0,
    37.7,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [407.045,
    407.045,
    407.045,
    407.045,
    407.045,
    407.045,
    407.045,
    407.045,
    407.045,
    503.18,
    599.315,
    599.315,
    695.45,
    695.45,
    695.45,
    620.05,
    431.54999999999995,
    431.54999999999995,
    393.84999999999997,
    393.84999999999997,
    393.84999999999997,
    393.84999999999997,
    393.84999999999997,
    393.84999999999997],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-188.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -565.5,
    -565.5,
    0.0,
    -565.5,
    0.0,
    0.0,
    2081.048500208768,
    4428.3873387850435,
    0.0,
    891.258300934581,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [46.151950286964166,
    372.2971147569733,
    365.0569588496055,
    245.79070591977597,
    447.6120570404655,
    275.68481177908416,
    223.4756669879789,
    13.309483618879312,
    0,
    128.77823317022103,
    558.8777506837168,
    853.5396325881193,
    545.3521898175277,
    393.6961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    7.040881346277274,
    5.397850027438835,
    49.38235463110141,
    97.71183027020379]],
  2: [[0.0,
    0.0,
    0.0,
    113.2,
    0.0,
    509.4,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    169.8,
    283.0,
    56.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [565.0,
    565.0,
    565.0,
    661.22,
    661.22,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1037.6100000000001,
    867.8100000000001,
    584.8100000000001,
    528.21,
    528.21,
    528.21,
    528.21,
    576.32,
    576.32],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    -566.0,
    0.0,
    -2547.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1562.1663807933191,
    3989.072520560745,
    6769.250032771535,
    1338.0694915887875,
    0.0,
    0.0,
    0.0,
    -283.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [46.151950286964166,
    372.2971147569733,
    365.0569588496055,
    245.79070591977597,
    447.6120570404655,
    275.68481177908416,
    223.4756669879789,
    13.309483618879312,
    0,
    128.77823317022103,
    558.8777506837168,
    853.5396325881193,
    545.3521898175277,
    393.6961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    7.040881346277274,
    5.397850027438835,
    49.38235463110141,
    97.71183027020379]],
  3: [[453.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.5,
    75.5,
    75.5,
    75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.5,
    226.5,
    226.5,
    75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [1140.05,
    1140.05,
    1140.05,
    1140.05,
    1140.05,
    1140.05,
    1140.05,
    1140.05,
    1140.05,
    1140.05,
    1204.225,
    1268.3999999999999,
    1332.575,
    1396.75,
    1396.75,
    1321.25,
    1094.75,
    868.25,
    792.75,
    792.75,
    792.75,
    792.75,
    792.75,
    792.75],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-2265.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -377.5,
    -377.5,
    -377.5,
    -377.5,
    0.0,
    2083.8085114822543,
    5321.112637850464,
    5417.79198735955,
    1784.8806822429938,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [46.151950286964166,
    372.2971147569733,
    365.0569588496055,
    245.79070591977597,
    447.6120570404655,
    275.68481177908416,
    223.4756669879789,
    13.309483618879312,
    0,
    128.77823317022103,
    558.8777506837168,
    853.5396325881193,
    545.3521898175277,
    393.6961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    7.040881346277274,
    5.397850027438835,
    49.38235463110141,
    97.71183027020379]]},
 'flat_tariff': {0: [[18.8,
    18.8,
    18.8,
    18.8,
    0.0,
    18.8,
    18.8,
    0.0,
    0.0,
    37.6,
    0.0,
    18.8,
    37.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    94.0,
    0.0,
    0.0,
    131.6],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    131.6,
    94.0,
    0.0,
    131.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [200.98,
    216.95999999999998,
    232.94,
    248.92,
    248.92,
    264.9,
    280.88,
    280.88,
    280.88,
    312.84,
    312.84,
    328.81999999999994,
    360.78,
    360.78,
    360.78,
    229.18,
    135.18,
    135.18,
    3.5800000000000267,
    3.5800000000000267,
    83.48000000000002,
    83.48000000000002,
    83.48000000000002,
    195.34],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-94.0,
    -94.0,
    -94.0,
    -94.0,
    0.0,
    -94.0,
    -94.0,
    0.0,
    0.0,
    -188.0,
    0.0,
    -94.0,
    -188.0,
    0.0,
    0.0,
    3632.174835908141,
    2208.3204766355125,
    0.0,
    3111.1297719626223,
    0.0,
    -470.0,
    0.0,
    0.0,
    -658.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-37.6,
    -37.6,
    -37.6,
    -37.6,
    0.0,
    -37.6,
    -37.6,
    0.0,
    0.0,
    -75.2,
    0.0,
    -37.6,
    -75.2,
    0.0,
    0.0,
    -263.2,
    -188.0,
    0.0,
    -263.2,
    0.0,
    -188.0,
    0.0,
    0.0,
    -263.2],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [235.0519502869638,
    353.49711475697313,
    327.3569588496057,
    226.9907059197758,
    428.7120570404659,
    558.7848117790836,
    166.9756669879789,
    13.309483618879312,
    0,
    335.77823317022103,
    709.7777506837174,
    646.0396325881193,
    262.3521898175277,
    204.99611837439988,
    0,
    0,
    0,
    0,
    0,
    0,
    44.64088134627764,
    24.197850027439017,
    49.38235463110141,
    41.311830270203245]],
  1: [[37.7,
    0.0,
    37.7,
    0.0,
    37.7,
    37.7,
    37.7,
    0.0,
    0.0,
    37.7,
    37.7,
    37.7,
    37.7,
    37.7,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.4,
    188.5,
    0.0,
    37.7,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [407.045,
    407.045,
    439.09000000000003,
    439.09000000000003,
    471.135,
    503.18,
    535.225,
    535.225,
    535.225,
    567.27,
    599.315,
    631.3600000000001,
    663.4050000000001,
    695.45,
    695.45,
    620.0500000000001,
    431.55000000000007,
    431.55000000000007,
    393.8500000000001,
    393.8500000000001,
    393.8500000000001,
    393.8500000000001,
    393.8500000000001,
    393.8500000000001],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-188.5,
    0.0,
    -188.5,
    0.0,
    -188.5,
    -188.5,
    -188.5,
    0.0,
    0.0,
    -188.5,
    -188.5,
    -188.5,
    -188.5,
    -188.5,
    0.0,
    2081.048500208768,
    4428.3873387850435,
    0.0,
    891.258300934581,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-75.4,
    0.0,
    -75.4,
    0.0,
    -75.4,
    -75.4,
    -75.4,
    0.0,
    0.0,
    -75.4,
    -75.4,
    -75.4,
    -75.4,
    -75.4,
    0.0,
    -150.8,
    -377.0,
    0.0,
    -75.4,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [235.0519502869638,
    353.49711475697313,
    327.3569588496057,
    226.9907059197758,
    428.7120570404659,
    558.7848117790836,
    166.9756669879789,
    13.309483618879312,
    0,
    335.77823317022103,
    709.7777506837174,
    646.0396325881193,
    262.3521898175277,
    204.99611837439988,
    0,
    0,
    0,
    0,
    0,
    0,
    44.64088134627764,
    24.197850027439017,
    49.38235463110141,
    41.311830270203245]],
  2: [[169.8,
    0.0,
    0.0,
    113.2,
    0.0,
    169.8,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    169.8,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    169.8,
    283.0,
    56.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [709.3300000000002,
    709.3300000000002,
    709.3300000000002,
    805.5500000000001,
    805.5500000000001,
    949.8800000000001,
    949.8800000000001,
    949.8800000000001,
    949.8800000000001,
    949.8800000000001,
    949.8800000000001,
    949.8800000000001,
    1094.21,
    1094.21,
    1094.21,
    1037.6100000000001,
    867.8100000000002,
    584.8100000000002,
    528.2100000000002,
    528.2100000000002,
    528.2100000000002,
    528.2100000000002,
    576.3200000000002,
    576.3200000000002],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-849.0,
    0.0,
    0.0,
    -566.0,
    0.0,
    -849.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -849.0,
    0.0,
    0.0,
    1562.1663807933191,
    3989.072520560745,
    6769.250032771535,
    1338.0694915887875,
    0.0,
    0.0,
    0.0,
    -283.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-339.6,
    0.0,
    0.0,
    -226.4,
    0.0,
    -339.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -339.6,
    0.0,
    0.0,
    -113.2,
    -339.6,
    -566.0,
    -113.2,
    0.0,
    0.0,
    0.0,
    -113.2,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [235.0519502869638,
    353.49711475697313,
    327.3569588496057,
    226.9907059197758,
    428.7120570404659,
    558.7848117790836,
    166.9756669879789,
    13.309483618879312,
    0,
    335.77823317022103,
    709.7777506837174,
    646.0396325881193,
    262.3521898175277,
    204.99611837439988,
    0,
    0,
    0,
    0,
    0,
    0,
    44.64088134627764,
    24.197850027439017,
    49.38235463110141,
    41.311830270203245]],
  3: [[75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    226.5,
    226.5,
    226.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.5,
    226.5,
    226.5,
    75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    819.175,
    1011.6999999999999,
    1204.225,
    1396.75,
    1396.75,
    1321.25,
    1094.75,
    868.25,
    792.75,
    792.75,
    792.75,
    792.75,
    792.75,
    792.75],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-377.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -1132.5,
    -1132.5,
    -1132.5,
    0.0,
    2083.8085114822543,
    5321.112637850464,
    5417.79198735955,
    1784.8806822429938,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-151.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -453.0,
    -453.0,
    -453.0,
    0.0,
    -151.0,
    -453.0,
    -453.0,
    -151.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [235.0519502869638,
    353.49711475697313,
    327.3569588496057,
    226.9907059197758,
    428.7120570404659,
    558.7848117790836,
    166.9756669879789,
    13.309483618879312,
    0,
    335.77823317022103,
    709.7777506837174,
    646.0396325881193,
    262.3521898175277,
    204.99611837439988,
    0,
    0,
    0,
    0,
    0,
    0,
    44.64088134627764,
    24.197850027439017,
    49.38235463110141,
    41.311830270203245]]},
 'hourly_tariff': {0: [[37.6,
    18.8,
    18.8,
    18.8,
    18.8,
    0.0,
    18.8,
    0.0,
    0.0,
    37.6,
    18.8,
    0.0,
    0.0,
    18.8,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.4,
    0.0,
    37.6,
    131.6],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    131.6,
    131.6,
    0.0,
    94.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [216.96,
    232.94,
    248.92000000000002,
    264.9,
    280.88,
    280.88,
    296.86,
    296.86,
    296.86,
    328.82,
    344.79999999999995,
    344.79999999999995,
    344.79999999999995,
    360.78,
    360.78,
    229.18000000000004,
    97.58000000000004,
    97.58000000000004,
    3.580000000000041,
    3.580000000000041,
    51.520000000000046,
    51.520000000000046,
    83.48000000000005,
    195.34000000000003],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-188.0,
    -94.0,
    -94.0,
    -94.0,
    -94.0,
    0.0,
    -94.0,
    0.0,
    0.0,
    -188.0,
    -94.0,
    0.0,
    0.0,
    -94.0,
    0.0,
    3632.174835908141,
    3091.648667289717,
    0.0,
    2222.235551401873,
    0.0,
    -282.0,
    0.0,
    -188.0,
    -658.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-75.2,
    -37.6,
    -37.6,
    -37.6,
    -37.6,
    0.0,
    -37.6,
    0.0,
    0.0,
    -75.2,
    -37.6,
    0.0,
    0.0,
    -37.6,
    0.0,
    -131.6,
    -131.6,
    0.0,
    -47.0,
    0.0,
    -112.8,
    0.0,
    -75.2,
    -263.2],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.6615158988925,
    370.43802569080526,
    403.0807279354731,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [348.351950286964,
    259.19711475697295,
    289.65695884960587,
    302.4907059197758,
    13.71205704046588,
    67.88481177908398,
    34.87566698797855,
    13.309483618879312,
    0,
    373.47823317022085,
    728.677750683717,
    929.0396325881193,
    733.952189817528,
    450.3961183743995,
    0,
    0,
    0,
    0,
    0,
    0,
    25.640881346277638,
    24.197850027439017,
    30.68235463110159,
    3.611830270203427]],
  1: [[37.7,
    37.7,
    75.4,
    37.7,
    37.7,
    37.7,
    37.7,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    37.7,
    37.7],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.4,
    150.8,
    0.0,
    75.4,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [407.045,
    439.09000000000003,
    503.18,
    535.225,
    567.27,
    599.315,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    631.3600000000001,
    555.96,
    405.16,
    405.16,
    329.76,
    329.76,
    329.76,
    329.76,
    361.805,
    393.85],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-188.5,
    -188.5,
    -377.0,
    -188.5,
    -188.5,
    -188.5,
    -188.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    2081.048500208768,
    3542.709871028035,
    0.0,
    1782.516601869162,
    0.0,
    0.0,
    0.0,
    -188.5,
    -188.5],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-75.4,
    -75.4,
    -150.8,
    -75.4,
    -75.4,
    -75.4,
    -75.4,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -75.4,
    -150.8,
    0.0,
    -37.7,
    0.0,
    0.0,
    0.0,
    -75.4,
    -75.4],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.6615158988925,
    370.43802569080526,
    403.0807279354731,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [348.351950286964,
    259.19711475697295,
    289.65695884960587,
    302.4907059197758,
    13.71205704046588,
    67.88481177908398,
    34.87566698797855,
    13.309483618879312,
    0,
    373.47823317022085,
    728.677750683717,
    929.0396325881193,
    733.952189817528,
    450.3961183743995,
    0,
    0,
    0,
    0,
    0,
    0,
    25.640881346277638,
    24.197850027439017,
    30.68235463110159,
    3.611830270203427]],
  2: [[113.2,
    56.6,
    0.0,
    0.0,
    396.2,
    0.0,
    56.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    169.8,
    283.0,
    56.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [661.22,
    709.33,
    709.33,
    709.33,
    1046.1,
    1046.1,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1037.6100000000001,
    867.8100000000001,
    584.8100000000001,
    528.21,
    528.21,
    576.32,
    576.32,
    576.32,
    576.32],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-566.0,
    -283.0,
    0.0,
    0.0,
    -1981.0,
    0.0,
    -283.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1562.1663807933191,
    3989.072520560745,
    6769.250032771535,
    1338.0694915887875,
    0.0,
    -283.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-226.4,
    -113.2,
    0.0,
    0.0,
    -792.4,
    0.0,
    -113.2,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -56.6,
    -169.8,
    -141.5,
    -28.3,
    0.0,
    -113.2,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.6615158988925,
    370.43802569080526,
    403.0807279354731,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [348.351950286964,
    259.19711475697295,
    289.65695884960587,
    302.4907059197758,
    13.71205704046588,
    67.88481177908398,
    34.87566698797855,
    13.309483618879312,
    0,
    373.47823317022085,
    728.677750683717,
    929.0396325881193,
    733.952189817528,
    450.3961183743995,
    0,
    0,
    0,
    0,
    0,
    0,
    25.640881346277638,
    24.197850027439017,
    30.68235463110159,
    3.611830270203427]],
  3: [[0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    679.5,
    75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.5,
    226.5,
    226.5,
    75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [755.0,
    755.0,
    755.0,
    755.0,
    755.0,
    1332.575,
    1396.75,
    1396.75,
    1396.75,
    1396.75,
    1396.75,
    1396.75,
    1396.75,
    1396.75,
    1396.75,
    1321.25,
    1094.75,
    868.25,
    792.75,
    792.75,
    792.75,
    792.75,
    792.75,
    792.75],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -3397.5,
    -377.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    2083.8085114822543,
    5321.112637850464,
    5417.79198735955,
    1784.8806822429938,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -1359.0,
    -151.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -75.5,
    -226.5,
    -113.25,
    -37.75,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.6615158988925,
    370.43802569080526,
    403.0807279354731,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [348.351950286964,
    259.19711475697295,
    289.65695884960587,
    302.4907059197758,
    13.71205704046588,
    67.88481177908398,
    34.87566698797855,
    13.309483618879312,
    0,
    373.47823317022085,
    728.677750683717,
    929.0396325881193,
    733.952189817528,
    450.3961183743995,
    0,
    0,
    0,
    0,
    0,
    0,
    25.640881346277638,
    24.197850027439017,
    30.68235463110159,
    3.611830270203427]]},
 'dynamic_tariff': {0: [[18.8,
    18.8,
    18.8,
    18.8,
    75.2,
    18.8,
    37.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    37.6,
    18.8,
    37.6,
    131.6],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    131.6,
    94.0,
    0.0,
    131.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [200.98,
    216.95999999999998,
    232.94,
    248.92,
    312.84000000000003,
    328.82,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    360.78,
    229.18000000000004,
    135.18000000000004,
    135.18000000000004,
    3.580000000000041,
    3.580000000000041,
    35.54000000000005,
    51.520000000000046,
    83.48000000000005,
    195.34000000000003],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-94.0,
    -94.0,
    -94.0,
    -94.0,
    -376.0,
    -94.0,
    -188.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3632.174835908141,
    2208.3204766355125,
    0.0,
    3111.1297719626223,
    0.0,
    -188.0,
    -94.0,
    -188.0,
    -658.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-37.6,
    -37.6,
    -37.6,
    -37.6,
    -150.4,
    -37.6,
    -75.2,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -65.8,
    -47.0,
    0.0,
    -65.8,
    0.0,
    -75.2,
    -37.6,
    -75.2,
    -263.2],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [442.5519502869638,
    202.49711475697313,
    365.0569588496055,
    189.29070591977597,
    51.9120570404657,
    256.884811779084,
    34.87566698797855,
    13.309483618879312,
    0,
    335.5782331702212,
    747.4777506837172,
    929.0396325881193,
    658.452189817528,
    318.1961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    25.540881346277274,
    5.397850027438835,
    11.782354631101953,
    41.311830270203245]],
  1: [[0.0,
    0.0,
    0.0,
    37.7,
    339.3,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.4,
    188.5,
    0.0,
    37.7,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [375.0,
    375.0,
    375.0,
    407.045,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    695.45,
    620.05,
    431.55,
    431.55,
    393.85,
    393.85,
    393.85,
    393.85,
    393.85,
    393.85],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    -188.5,
    -1696.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    2081.048500208768,
    4428.3873387850435,
    0.0,
    891.258300934581,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    -75.4,
    -678.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -37.7,
    -94.25,
    0.0,
    -18.85,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [442.5519502869638,
    202.49711475697313,
    365.0569588496055,
    189.29070591977597,
    51.9120570404657,
    256.884811779084,
    34.87566698797855,
    13.309483618879312,
    0,
    335.5782331702212,
    747.4777506837172,
    929.0396325881193,
    658.452189817528,
    318.1961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    25.540881346277274,
    5.397850027438835,
    11.782354631101953,
    41.311830270203245]],
  2: [[0.0,
    0.0,
    0.0,
    113.2,
    0.0,
    509.4,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    56.6,
    169.8,
    283.0,
    56.6,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [565.0,
    565.0,
    565.0,
    661.22,
    661.22,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1094.21,
    1037.61,
    867.81,
    584.81,
    528.2099999999999,
    528.2099999999999,
    528.2099999999999,
    528.2099999999999,
    576.3199999999999,
    576.3199999999999],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    -566.0,
    0.0,
    -2547.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1562.1663807933191,
    3989.072520560745,
    6769.250032771535,
    1338.0694915887875,
    0.0,
    0.0,
    0.0,
    -283.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    -226.4,
    0.0,
    -1018.8,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -28.3,
    -84.9,
    -141.5,
    -28.3,
    0.0,
    0.0,
    0.0,
    -113.2,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [442.5519502869638,
    202.49711475697313,
    365.0569588496055,
    189.29070591977597,
    51.9120570404657,
    256.884811779084,
    34.87566698797855,
    13.309483618879312,
    0,
    335.5782331702212,
    747.4777506837172,
    929.0396325881193,
    658.452189817528,
    318.1961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    25.540881346277274,
    5.397850027438835,
    11.782354631101953,
    41.311830270203245]],
  3: [[75.5,
    151.0,
    0.0,
    0.0,
    0.0,
    0.0,
    151.0,
    0.0,
    0.0,
    75.5,
    0.0,
    0.0,
    75.5,
    151.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.5,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    75.5,
    226.5,
    226.5,
    75.5,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0],
   [819.175,
    947.525,
    947.525,
    947.525,
    947.525,
    947.525,
    1075.875,
    1075.875,
    1075.875,
    1140.05,
    1140.05,
    1140.05,
    1204.225,
    1332.575,
    1332.575,
    1257.075,
    1030.575,
    804.0749999999999,
    728.5749999999999,
    728.5749999999999,
    792.75,
    792.75,
    792.75,
    792.75],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.953797468354395,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.1681933534743223,
    32.6001127348643,
    28.492771028037367,
    28.91961142322097,
    28.6408037383178,
    4.387626213592242,
    0.0,
    0.0,
    0.0,
    0.0],
   [-377.5,
    -755.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -755.0,
    0.0,
    0.0,
    -377.5,
    0.0,
    0.0,
    -377.5,
    -755.0,
    0.0,
    2083.8085114822543,
    5321.112637850464,
    5417.79198735955,
    1784.8806822429938,
    0.0,
    -377.5,
    0.0,
    0.0,
    0.0],
   [0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19518370.43179176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    19851660.42651359,
    20033906.93474405,
    21116599.44991215,
    21869047.25339872,
    21183875.048691098,
    19761857.850192238,
    0.0,
    0.0,
    0.0,
    0.0],
   [-151.0,
    -302.0,
    0.0,
    0.0,
    0.0,
    0.0,
    -302.0,
    0.0,
    0.0,
    -151.0,
    0.0,
    0.0,
    -151.0,
    -302.0,
    0.0,
    -37.75,
    -113.25,
    -113.25,
    -37.75,
    0.0,
    -151.0,
    0.0,
    0.0,
    0.0],
   [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118.12753815839733,
    0,
    0,
    0,
    0,
    0,
    89.10370551731103,
    139.20775823959684,
    179.56151589889214,
    370.43802569080526,
    403.18072793547344,
    199.82063349250257,
    0,
    0,
    0,
    0],
   [442.5519502869638,
    202.49711475697313,
    365.0569588496055,
    189.29070591977597,
    51.9120570404657,
    256.884811779084,
    34.87566698797855,
    13.309483618879312,
    0,
    335.5782331702212,
    747.4777506837172,
    929.0396325881193,
    658.452189817528,
    318.1961183743997,
    0,
    0,
    0,
    0,
    0,
    0,
    25.540881346277274,
    5.397850027438835,
    11.782354631101953,
    41.311830270203245]]}}

# plot_scenarios_analysis(outputs)
# plt.show()



## Price Demand Curve
def plot_price_demand_curve(ax, Demand_price, Demand_volume):
    """
    Plot hourly price-demand step curves.

    Parameters:
        ax (matplotlib.axes.Axes): Plotting axes
        Demand_price (DataFrame Nx24): Price per demand step per hour
        Demand_volume (DataFrame Nx24): Volume per demand step per hour
    """
    temps = Demand_price.shape[1]
    for t in range(temps):
        ax.step(
            np.insert(Demand_volume[:, t], 0, 0),
            np.insert(Demand_price[:, t], 0, Demand_price[0, t]),
            where='post',
            label=f"Hour {t+1}"
        )
    ax.set_xlabel("Volume (MWh)")
    ax.set_ylabel("Price (€/MWh)")
    ax.set_title("Price Demand Curve")
    ax.grid()


## Demand Over Time
def plot_demand_over_time(ax, Demand_volume_total):
    """
    Plot total demand per hour.

    Parameters:
        ax (matplotlib.axes.Axes): Target axes
        Demand_volume_total (np.ndarray): Total hourly demand
    """
    temps = Demand_volume_total.shape[0]
    ax.plot(Demand_volume_total, color="red", marker='.')
    ax.bar(x=range(temps), height=Demand_volume_total, color='red', alpha=0.5, align='edge')
    ax.set_ylim(bottom=0)
    ax.set_xlabel("Hour (h)")
    ax.set_ylabel("Cumulated demand (MWh)")
    ax.set_title("Demand Over Time")
    ax.grid()


## Renewable Production Over Time
def plot_renewable_over_time(ax, RES, Demand_volume_total):
    """
    Plot RES production and demand comparison.

    Parameters:
        ax (matplotlib.axes.Axes): Target axes
        RES (Series or array): Renewable hourly production
        Demand_volume_total (np.ndarray): Hourly demand
    """
    temps = Demand_volume_total.shape[0]
    ax.plot(RES, color="green", marker='.')
    ax.bar(x=range(temps), height=RES, color='green', alpha=0.5, align='edge')
    ax.plot(Demand_volume_total, color='red', linestyle='--', linewidth=1, label="Total Demand")
    ax.set_xlabel("Hour (h)")
    ax.set_ylabel("Power (MW)")
    ax.set_title("Renewable Production Over Time")
    ax.legend()
    ax.grid()


## Residual Demand Over Time
def plot_residual_over_time(ax, Residual):
    """
    Plot hourly residual demand.

    Parameters:
        ax (matplotlib.axes.Axes): Target axes
        Residual (np.ndarray): Residual hourly demand
    """
    temps = Residual.shape[0]
    ax.plot(Residual, color="red", marker='.')
    ax.bar(x=range(temps), height=Residual, color='red', alpha=0.5, align='edge')
    ax.set_xlabel("Time (h)")
    ax.set_ylabel("Power (MW)")
    ax.set_title("Residual Demand Over Time")
    ax.grid()
